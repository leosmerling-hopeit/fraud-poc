# AUTOGENERATED! DO NOT EDIT! File to edit: 00_jobs.ipynb (unless otherwise specified).

__all__ = ['get_client', 'MakeSampleDataJob', 'PreprocessingJob', 'FeatureCalcJob']

# Cell
from typing import Dict, Optional

from hopeit.app.context import EventContext
from dataclasses import dataclass, field
from hopeit.dataobjects import dataobject

# Cell
async def get_client_async(context: Optional[EventContext] = None):
    from dask.distributed import Client
    url = "local" if context is None else context.env['dask']['url']
    if url == "local":
        client = await Client(asynchronous=True)
    else:
        client = await Client(url, asynchronous=True)
    return client

def get_client(context: Optional[EventContext] = None):
    from dask.distributed import Client
    url = "local" if context is None else context.env['dask']['url']
    if url == "local":
        client = Client()
    else:
        client = Client(url)
    return client



# Cell
@dataobject
@dataclass
class MakeSampleDataJob:
    path: str
    num_batches: int
    batch_size: int
    batch_span_days: int

# Cell
@dataobject
@dataclass
class PreprocessingJob:
    source: str
    partitioned: Dict[str, str] = field(default_factory=dict)

# Cell
@dataobject
@dataclass
class FeatureCalcJob:
    sources: Dict[str, str] = field(default_factory=dict)
    features: Dict[str, str] = field(default_factory=dict)